rm(list = ls())
library("data.table")
library("chron") # day.of.week command
# LOAD DATA --------------------------------------------------------------------
# ticker id's
country.lookup <- read.csv("data-raw/country_lookup.csv")
# daily stock returns
# countries
f <- list.files("data-raw/indices")
indices <- lapply(f, function (x) fread(paste0("data-raw/indices/", x)))
indices <- do.call("rbind", indices)
indices[, Period_Change := NULL]
setnames(indices, c("date","ticker","p","dr","real_p"))
# regime changes
event <- fread("data-raw/event_list.csv")
# leader duration
leaders <- fread("data-raw/leaders_duration.csv")
# revolution dates
rev <- fread("data-raw/revolutions.csv")
rev[, num := seq(1, length(country), 1)]
rev[, start_date := as.Date(start_date,"%m/%d/%Y")]
rev[, end_date := as.Date(end_date,"%m/%d/%Y")]
# CLEAN DATA -------------------------------------------------------------------
# inflation adjusted returns
indices[, dr := (real_p - shift(real_p))/shift(real_p), by = "ticker"]
## continuously compounded returns
indices[, dr := 100 * log(dr+1)]
indices[, abs_dr := abs(dr)]
## dates
indices[, date := as.Date(date,"%m/%d/%Y")]
indices[, month := as.numeric(format(date, format = "%m"))]
indices[, day := as.numeric(format(date, format = "%d"))]
indices[, year := as.numeric(format(date, format = "%Y"))]
indices[, dow := day.of.week(month, day, year)]
event[, stock_date := as.Date(stock_date,"%m/%d/%Y")]
## market indices
ticker.market <- c("_MIWO00D", "_IPDCPD", "_A31", "_P31")
index.market <- indices[ticker %in% ticker.market,
.(date, ticker, dow, p, dr, real_p, abs_dr)]
# use friday market indices for countries that trade on sunday's. note that
# i am only doing this for emerging market and world indices
index.market.0 <- index.market[dow == 5 & ticker %in% c("_MIWO00D", "_IPDCPD")]
index.market.0[, date := date + 2]
index.market <- rbind(index.market.0, index.market)
index.market[, dow := NULL]
# wide form
index.market <- melt(index.market, id.vars = c("date", "ticker"))
index.market <- dcast.data.table(index.market, date  ~ ticker + variable, value.var = "value")
market.names <- gsub("_MIWO00D", "msci_wi", colnames(index.market))
market.names <- gsub("_IPDCPD", "emerg", market.names)
market.names <- gsub("_A31", "latamer", market.names)
market.names <- gsub("_P31", "seasia", market.names)
setnames(index.market, market.names)
## country indices
index <- indices[!ticker %in% ticker.market]
index <- merge(index, index.market, all.x = TRUE, by = "date")
index <- index[order(ticker, date)]
index[, td := seq(1, .N), by = "ticker"]
# regime change
regime.change <- event[type == "Coup" | type == "Assassination" |
type == "Resignation",
.(country, ticker, stock_date, type)]
# SAVE DATA --------------------------------------------------------------------
save(country.lookup, event, index, regime.change, rev,
file = "data/data-clean.RData")
cd /Users/trevorincerti/Desktop/git/political_instability
dir /Users/trevorincerti/Desktop/git/political_instability
dir "/Users/trevorincerti/Desktop/git/political_instability"
dir "/Users/trevorincerti/Desktop/git/political_instability"
dir '/Users/trevorincerti/Desktop/git/political_instability'
setwd "/Users/trevorincerti/Desktop/git/political_instability"
setwd '/Users/trevorincerti/Desktop/git/political_instability'
setwd("/Users/trevorincerti/Desktop/git/political_instability")
rm(list = ls())
library("data.table")
library("chron") # day.of.week command
# LOAD DATA --------------------------------------------------------------------
# ticker id's
country.lookup <- read.csv("data-raw/country_lookup.csv")
# daily stock returns
# countries
f <- list.files("data-raw/indices")
indices <- lapply(f, function (x) fread(paste0("data-raw/indices/", x)))
indices <- do.call("rbind", indices)
indices[, Period_Change := NULL]
setnames(indices, c("date","ticker","p","dr","real_p"))
# regime changes
event <- fread("data-raw/event_list.csv")
# leader duration
leaders <- fread("data-raw/leaders_duration.csv")
# revolution dates
rev <- fread("data-raw/revolutions.csv")
rev[, num := seq(1, length(country), 1)]
rev[, start_date := as.Date(start_date,"%m/%d/%Y")]
rev[, end_date := as.Date(end_date,"%m/%d/%Y")]
# CLEAN DATA -------------------------------------------------------------------
# inflation adjusted returns
indices[, dr := (real_p - shift(real_p))/shift(real_p), by = "ticker"]
## continuously compounded returns
indices[, dr := 100 * log(dr+1)]
indices[, abs_dr := abs(dr)]
## dates
indices[, date := as.Date(date,"%m/%d/%Y")]
indices[, month := as.numeric(format(date, format = "%m"))]
indices[, day := as.numeric(format(date, format = "%d"))]
indices[, year := as.numeric(format(date, format = "%Y"))]
indices[, dow := day.of.week(month, day, year)]
event[, stock_date := as.Date(stock_date,"%m/%d/%Y")]
## market indices
ticker.market <- c("_MIWO00D", "_IPDCPD", "_A31", "_P31")
index.market <- indices[ticker %in% ticker.market,
.(date, ticker, dow, p, dr, real_p, abs_dr)]
# use friday market indices for countries that trade on sunday's. note that
# i am only doing this for emerging market and world indices
index.market.0 <- index.market[dow == 5 & ticker %in% c("_MIWO00D", "_IPDCPD")]
index.market.0[, date := date + 2]
index.market <- rbind(index.market.0, index.market)
index.market[, dow := NULL]
# wide form
index.market <- melt(index.market, id.vars = c("date", "ticker"))
index.market <- dcast.data.table(index.market, date  ~ ticker + variable, value.var = "value")
market.names <- gsub("_MIWO00D", "msci_wi", colnames(index.market))
market.names <- gsub("_IPDCPD", "emerg", market.names)
market.names <- gsub("_A31", "latamer", market.names)
market.names <- gsub("_P31", "seasia", market.names)
setnames(index.market, market.names)
## country indices
index <- indices[!ticker %in% ticker.market]
index <- merge(index, index.market, all.x = TRUE, by = "date")
index <- index[order(ticker, date)]
index[, td := seq(1, .N), by = "ticker"]
# regime change
regime.change <- event[type == "Coup" | type == "Assassination" |
type == "Resignation",
.(country, ticker, stock_date, type)]
# SAVE DATA --------------------------------------------------------------------
save(country.lookup, event, index, regime.change, rev,
file = "data/data-clean.RData")
setwd("/Users/trevorincerti/Desktop/git/political_instability/")
rm(list = ls())
library("data.table")
library("chron") # day.of.week command
# LOAD DATA --------------------------------------------------------------------
# ticker id's
country.lookup <- read.csv("data-raw/country_lookup.csv")
View(country.lookup)
# daily stock returns
# countries
f <- list.files("data-raw/indices")
indices <- lapply(f, function (x) fread(paste0("data-raw/indices/", x)))
indices <- do.call("rbind", indices)
indices[, Period_Change := NULL]
setnames(indices, c("date","ticker","p","dr","real_p"))
# regime changes
event <- fread("data-raw/event_list.csv")
rm(list = ls())
library("data.table")
library("chron") # day.of.week command
# LOAD DATA --------------------------------------------------------------------
# ticker id's
country.lookup <- read.csv("data-raw/country_lookup.csv")
View(country.lookup)
f <- list.files("data-raw/indices")
indices <- lapply(f, function (x) fread(paste0("data-raw/indices/", x)))
rm(list = ls())
library("data.table")
install.packages(data.table)
install.packages("data.table")
install.packages("chron")
rm(list = ls())
library("data.table")
library("chron") # day.of.week command
# LOAD DATA --------------------------------------------------------------------
# ticker id's
country.lookup <- read.csv("data-raw/country_lookup.csv")
# daily stock returns
# countries
f <- list.files("data-raw/indices")
indices <- lapply(f, function (x) fread(paste0("data-raw/indices/", x)))
indices <- do.call("rbind", indices)
indices[, Period_Change := NULL]
setnames(indices, c("date","ticker","p","dr","real_p"))
# regime changes
event <- fread("data-raw/event_list.csv")
# leader duration
leaders <- fread("data-raw/leaders_duration.csv")
# revolution dates
rev <- fread("data-raw/revolutions.csv")
rev[, num := seq(1, length(country), 1)]
rev[, start_date := as.Date(start_date,"%m/%d/%Y")]
rev[, end_date := as.Date(end_date,"%m/%d/%Y")]
# CLEAN DATA -------------------------------------------------------------------
# inflation adjusted returns
indices[, dr := (real_p - shift(real_p))/shift(real_p), by = "ticker"]
## continuously compounded returns
indices[, dr := 100 * log(dr+1)]
indices[, abs_dr := abs(dr)]
## dates
indices[, date := as.Date(date,"%m/%d/%Y")]
indices[, month := as.numeric(format(date, format = "%m"))]
indices[, day := as.numeric(format(date, format = "%d"))]
indices[, year := as.numeric(format(date, format = "%Y"))]
indices[, dow := day.of.week(month, day, year)]
event[, stock_date := as.Date(stock_date,"%m/%d/%Y")]
## market indices
ticker.market <- c("_MIWO00D", "_IPDCPD", "_A31", "_P31")
index.market <- indices[ticker %in% ticker.market,
.(date, ticker, dow, p, dr, real_p, abs_dr)]
# use friday market indices for countries that trade on sunday's. note that
# i am only doing this for emerging market and world indices
index.market.0 <- index.market[dow == 5 & ticker %in% c("_MIWO00D", "_IPDCPD")]
index.market.0[, date := date + 2]
index.market <- rbind(index.market.0, index.market)
index.market[, dow := NULL]
# wide form
index.market <- melt(index.market, id.vars = c("date", "ticker"))
index.market <- dcast.data.table(index.market, date  ~ ticker + variable, value.var = "value")
market.names <- gsub("_MIWO00D", "msci_wi", colnames(index.market))
market.names <- gsub("_IPDCPD", "emerg", market.names)
market.names <- gsub("_A31", "latamer", market.names)
market.names <- gsub("_P31", "seasia", market.names)
setnames(index.market, market.names)
## country indices
index <- indices[!ticker %in% ticker.market]
index <- merge(index, index.market, all.x = TRUE, by = "date")
index <- index[order(ticker, date)]
index[, td := seq(1, .N), by = "ticker"]
# regime change
regime.change <- event[type == "Coup" | type == "Assassination" |
type == "Resignation",
.(country, ticker, stock_date, type)]
# SAVE DATA --------------------------------------------------------------------
save(country.lookup, event, index, regime.change, rev,
file = "data/data-clean.RData")
install.packages("ggplot2")
rm(list = ls())
library("data.table")
library("ggplot2")
load("data/data-clean.RData")
source("code/func.R")
theme_set(theme_bw())
# ABSOLUTE VALUE OF DAILY STOCK RETURNS BY DAYS FROM EVENT ---------------------
pre <- post <- 200
dr <- matrix(NA, nrow = pre + post + 1, ncol = nrow(regime.change))
for (i in 1:nrow(regime.change)){
dr[, i] <- return_by_td(stockdata = index,
event_ticker = regime.change$ticker[i],
event_date = regime.change$stock_date[i], pre_event = pre,
post_event = post)
}
# exclude 2 events that don't have complete data
dr.na <- apply(dr, 2, function (x) sum(1 * is.na(x)))
abs.dr.mean <- apply(abs(dr[, which(dr.na == 0)]), 1, mean)
# plot
tmp <- data.table(dr = abs.dr.mean, td = seq(-pre, post))
p <- ggplot(tmp, aes(x = td, y = dr)) +
geom_segment(mapping = aes(xend = td, yend = 0)) +
xlab("Trading days") + ylab("Absolute value of daily return (%)")
ggsave("figs/daily_mean_absreturn.pdf", p, height = 5, width = 7)
# Import libraries
rm(list = ls())
library("data.table")
library("ggplot2")
load("data/data-clean.RData")
source("code/func.R")
theme_set(theme_bw())
# ABSOLUTE VALUE OF DAILY STOCK RETURNS BY DAYS FROM EVENT ---------------------
pre <- post <- 200
dr <- matrix(NA, nrow = pre + post + 1, ncol = nrow(regime.change))
for (i in 1:nrow(regime.change)){
dr[, i] <- return_by_td(stockdata = index[ticker == regime.change$ticker[i], .(date, dr)],
event_date = regime.change$stock_date[i], pre_event = pre,
post_event = post)
}
# note: 2 events don't have complete data and are excluded
dr.na <- apply(dr, 2, function (x) sum(1 * is.na(x)))
abs.dr.mean <- apply(abs(dr[, which(dr.na==0)]), 1, mean)
tmp <- data.table(dr = abs.dr.mean, td = seq(-pre, post))
# Create plot
p <- ggplot(tmp, aes(x = td, y = dr)) +
geom_area(color="gray48", fill='gray48', size = .1) +
xlab("Trading days") + ylab("Absolute value of daily return (%)") +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()) +
theme(axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
axis.ticks = element_blank()) +
theme(plot.margin=unit(c(0.5,0.5,0.5,0.5),"cm")) +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0))
ggsave("figs/daily_mean_absreturn.pdf", p, height = 5, width = 7)
# Import libraries
rm(list = ls())
library("data.table")
library("ggplot2")
load("data/data-clean.RData")
source("code/func.R")
theme_set(theme_bw())
# ABSOLUTE VALUE OF DAILY STOCK RETURNS BY DAYS FROM EVENT ---------------------
pre <- post <- 200
dr <- matrix(NA, nrow = pre + post + 1, ncol = nrow(regime.change))
for (i in 1:nrow(regime.change)){
dr[, i] <- return_by_td(stockdata = index[ticker == regime.change$ticker[i], .(date, dr)],
event_date = regime.change$stock_date[i], pre_event = pre,
post_event = post)
}
rm(list = ls())
library("data.table")
library("ggplot2")
load("data/data-clean.RData")
source("code/func.R")
theme_set(theme_bw())
# ABSOLUTE VALUE OF DAILY STOCK RETURNS BY DAYS FROM EVENT ---------------------
pre <- post <- 200
dr <- matrix(NA, nrow = pre + post + 1, ncol = nrow(regime.change))
for (i in 1:nrow(regime.change)){
dr[, i] <- return_by_td(stockdata = index,
event_ticker = regime.change$ticker[i],
event_date = regime.change$stock_date[i], pre_event = pre,
post_event = post)
}
# exclude 2 events that don't have complete data
dr.na <- apply(dr, 2, function (x) sum(1 * is.na(x)))
abs.dr.mean <- apply(abs(dr[, which(dr.na == 0)]), 1, mean)
# plot
tmp <- data.table(dr = abs.dr.mean, td = seq(-pre, post))
p <- ggplot(tmp, aes(x = td, y = dr)) +
geom_segment(mapping = aes(xend = td, yend = 0)) +
xlab("Trading days") + ylab("Absolute value of daily return (%)")
ggsave("figs/daily_mean_absreturn.pdf", p, height = 5, width = 7)
# Import libraries
rm(list = ls())
library("data.table")
library("ggplot2")
load("data/data-clean.RData")
source("code/func.R")
theme_set(theme_bw())
# ABSOLUTE VALUE OF DAILY STOCK RETURNS BY DAYS FROM EVENT ---------------------
pre <- post <- 200
dr <- matrix(NA, nrow = pre + post + 1, ncol = nrow(regime.change))
for (i in 1:nrow(regime.change)){
dr[, i] <- return_by_td(stockdata = index[ticker == regime.change$ticker[i], .(date, dr)],
event_date = regime.change$stock_date[i], pre_event = pre,
post_event = post)
}
# Import libraries
rm(list = ls())
library("data.table")
library("ggplot2")
load("data/data-clean.RData")
source("code/func.R")
theme_set(theme_bw())
# ABSOLUTE VALUE OF DAILY STOCK RETURNS BY DAYS FROM EVENT ---------------------
pre <- post <- 200
dr <- matrix(NA, nrow = pre + post + 1, ncol = nrow(regime.change))
for (i in 1:nrow(regime.change)){
dr[, i] <- return_by_td(stockdata = index,
event_ticker = regime.change$ticker[i],
event_date = regime.change$stock_date[i], pre_event = pre,
post_event = post)
}
# Import libraries
rm(list = ls())
library("data.table")
library("ggplot2")
load("data/data-clean.RData")
source("code/func.R")
theme_set(theme_bw())
# ABSOLUTE VALUE OF DAILY STOCK RETURNS BY DAYS FROM EVENT ---------------------
pre <- post <- 200
dr <- matrix(NA, nrow = pre + post + 1, ncol = nrow(regime.change))
for (i in 1:nrow(regime.change)){
dr[, i] <- return_by_td(stockdata = index,
event_ticker = regime.change$ticker[i],
event_date = regime.change$stock_date[i], pre_event = pre,
post_event = post)
}
# note: 2 events don't have complete data and are excluded
dr.na <- apply(dr, 2, function (x) sum(1 * is.na(x)))
abs.dr.mean <- apply(abs(dr[, which(dr.na==0)]), 1, mean)
tmp <- data.table(dr = abs.dr.mean, td = seq(-pre, post))
# Create plot
p <- ggplot(tmp, aes(x = td, y = dr)) +
geom_area(color="gray48", fill='gray48', size = .1) +
xlab("Trading days") + ylab("Absolute value of daily return (%)") +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()) +
theme(axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
axis.ticks = element_blank()) +
theme(plot.margin=unit(c(0.5,0.5,0.5,0.5),"cm")) +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0))
ggsave("figs/daily_mean_absreturn.pdf", p, height = 5, width = 7)
