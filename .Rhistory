library("data.table")
load("data/data-clean.RData")
theme_set(theme_bw())
source("code/func.R")
# EVENT STUDY ------------------------------------------------------------------
# calculate abnormal returns and days to rebound
event.window <- 20
est.window <- 200
n.es <- nrow(regime.change)
es <- es.abs <- vector(mode = "list", n.es)
dtr.treat <- rep(NA, n.es)
# loop
for (i in 1:n.es){
# no controls for 1901
if(regime.change$stock_date[i] == mydate("09/07/1901")){
controli <- FALSE
} else{
controli <- TRUE
}
# use custom V in synth to deal with singular matrix in optim
if (regime.change$stock_date[i] == mydate("10/4/2002")){
custom.v.i <- rep(1, 2)
} else{
custom.v.i <- NULL
}
# run event study
es[[i]] <- event_study(ticker = index$ticker, date = index$date, dr = index$dr,
event_ticker = regime.change$ticker[i],
event_window = event.window, estimation_window = est.window,
event_date = regime.change$stock_date[i], model = "constant",
control = controli, custom_v = custom.v.i)
es.abs[[i]] <- event_study(ticker = index$ticker, date = index$date, dr = abs(index$dr),
event_ticker = regime.change$ticker[i],
event_window = event.window, estimation_window = est.window,
event_date = regime.change$stock_date[i], model = "constant",
control = controli, custom_v = custom.v.i)
# days to rebound
dtr.treat[i] <- days_to_rebound(ticker = index$ticker, date = index$date, price = index$p,
event_ticker = regime.change$ticker[i],
event_date = regime.change$stock_date[i])
# print
print(i)
}
# combine event studies
rc.es <- combine_event_studies(es, event_country = regime.change$country,
event_type = regime.change$type,
event_date = regime.change$stock_date)
rc.es <- c(rc.es, list(dtr.treat = dtr.treat))
rc.abs.es <- combine_event_studies(es.abs, event_country = regime.change$country,
event_type = regime.change$type,
event_date = regime.change$stock_date)
# save
save(rc.es, rc.abs.es, file = "output/regime-change-event-study.RData")
install.packages("Synth")
install.packages("Synth")
rm(list = ls())
library("data.table")
library("chron") # day.of.week command
# LOAD DATA --------------------------------------------------------------------
# ticker id's
country.lookup <- read.csv("data-raw/country_lookup.csv")
# daily stock returns
# countries
f <- list.files("data-raw/indices")
indices <- lapply(f, function (x) fread(paste0("data-raw/indices/", x)))
indices <- do.call("rbind", indices)
indices[, Period_Change := NULL]
setnames(indices, c("date","ticker","p","dr","real_p"))
# regime changes
event <- fread("data-raw/event_list.csv")
# leader duration
leaders <- fread("data-raw/leaders_duration.csv")
# revolution dates
rev <- fread("data-raw/revolutions.csv")
rev[, num := seq(1, length(country), 1)]
rev[, start_date := as.Date(start_date,"%m/%d/%Y")]
rev[, end_date := as.Date(end_date,"%m/%d/%Y")]
# CLEAN DATA -------------------------------------------------------------------
# inflation adjusted returns
indices[, dr := (real_p - shift(real_p))/shift(real_p), by = "ticker"]
## continuously compounded returns
indices[, dr := 100 * log(dr+1)]
indices[, abs_dr := abs(dr)]
## dates
indices[, date := as.Date(date,"%m/%d/%Y")]
indices[, month := as.numeric(format(date, format = "%m"))]
indices[, day := as.numeric(format(date, format = "%d"))]
indices[, year := as.numeric(format(date, format = "%Y"))]
indices[, dow := day.of.week(month, day, year)]
event[, stock_date := as.Date(stock_date,"%m/%d/%Y")]
## market indices
ticker.market <- c("_MIWO00D", "_IPDCPD", "_A31", "_P31")
index.market <- indices[ticker %in% ticker.market,
.(date, ticker, dow, p, dr, real_p, abs_dr)]
# use friday market indices for countries that trade on sunday's. note that
# i am only doing this for emerging market and world indices
index.market.0 <- index.market[dow == 5 & ticker %in% c("_MIWO00D", "_IPDCPD")]
index.market.0[, date := date + 2]
index.market <- rbind(index.market.0, index.market)
index.market[, dow := NULL]
# wide form
index.market <- melt(index.market, id.vars = c("date", "ticker"))
index.market <- dcast.data.table(index.market, date  ~ ticker + variable, value.var = "value")
market.names <- gsub("_MIWO00D", "msci_wi", colnames(index.market))
market.names <- gsub("_IPDCPD", "emerg", market.names)
market.names <- gsub("_A31", "latamer", market.names)
market.names <- gsub("_P31", "seasia", market.names)
setnames(index.market, market.names)
## country indices
index <- indices[!ticker %in% ticker.market]
index <- merge(index, index.market, all.x = TRUE, by = "date")
index <- index[order(ticker, date)]
index[, td := seq(1, .N), by = "ticker"]
# regime change
regime.change <- event[type == "Coup" | type == "Assassination" |
type == "Resignation",
.(country, ticker, stock_date, type)]
# SAVE DATA --------------------------------------------------------------------
save(country.lookup, event, index, regime.change, rev,
file = "data/data-clean.RData")
# Import libraries
rm(list = ls())
library("data.table")
library("ggplot2")
load("data/data-clean.RData")
source("code/func.R")
theme_set(theme_bw())
# ABSOLUTE VALUE OF DAILY STOCK RETURNS BY DAYS FROM EVENT ---------------------
pre <- post <- 200
dr <- matrix(NA, nrow = pre + post + 1, ncol = nrow(regime.change))
for (i in 1:nrow(regime.change)){
dr[, i] <- return_by_td(stockdata = index,
event_ticker = regime.change$ticker[i],
event_date = regime.change$stock_date[i], pre_event = pre,
post_event = post)
}
# note: 2 events don't have complete data and are excluded
dr.na <- apply(dr, 2, function (x) sum(1 * is.na(x)))
abs.dr.mean <- apply(abs(dr[, which(dr.na==0)]), 1, mean)
tmp <- data.table(dr = abs.dr.mean, td = seq(-pre, post))
# Create plot
p <- ggplot(tmp, aes(x = td, y = dr)) +
geom_area(color="gray48", fill='gray48', size = .1) +
xlab("Trading days") + ylab("Absolute value of daily return (%)") +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()) +
theme(axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
axis.ticks = element_blank()) +
theme(plot.margin=unit(c(0.5,0.5,0.5,0.5),"cm")) +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0))
ggsave("figs/daily_mean_absreturn.pdf", p, height = 5, width = 7)
rm(list = ls())
library("xtable")
library("data.table")
library("Synth")
load("data/data-clean.RData")
theme_set(theme_bw())
source("code/func.R")
# EVENT STUDY ------------------------------------------------------------------
# calculate abnormal returns and days to rebound
event.window <- 20
est.window <- 200
n.es <- nrow(regime.change)
es <- es.abs <- vector(mode = "list", n.es)
dtr.treat <- rep(NA, n.es)
# loop
for (i in 1:n.es){
# no controls for 1901
if(regime.change$stock_date[i] == mydate("09/07/1901")){
controli <- FALSE
} else{
controli <- TRUE
}
# use custom V in synth to deal with singular matrix in optim
if (regime.change$stock_date[i] == mydate("10/4/2002")){
custom.v.i <- rep(1, 2)
} else{
custom.v.i <- NULL
}
# run event study
es[[i]] <- event_study(ticker = index$ticker, date = index$date, dr = index$dr,
event_ticker = regime.change$ticker[i],
event_window = event.window, estimation_window = est.window,
event_date = regime.change$stock_date[i], model = "constant",
control = controli, custom_v = custom.v.i)
es.abs[[i]] <- event_study(ticker = index$ticker, date = index$date, dr = abs(index$dr),
event_ticker = regime.change$ticker[i],
event_window = event.window, estimation_window = est.window,
event_date = regime.change$stock_date[i], model = "constant",
control = controli, custom_v = custom.v.i)
# days to rebound
dtr.treat[i] <- days_to_rebound(ticker = index$ticker, date = index$date, price = index$p,
event_ticker = regime.change$ticker[i],
event_date = regime.change$stock_date[i])
# print
print(i)
}
# combine event studies
rc.es <- combine_event_studies(es, event_country = regime.change$country,
event_type = regime.change$type,
event_date = regime.change$stock_date)
rc.es <- c(rc.es, list(dtr.treat = dtr.treat))
rc.abs.es <- combine_event_studies(es.abs, event_country = regime.change$country,
event_type = regime.change$type,
event_date = regime.change$stock_date)
# save
save(rc.es, rc.abs.es, file = "output/regime-change-event-study.RData")
rc.es <- combine_event_studies(es, event_country = regime.change$country,
event_type = regime.change$type,
event_date = regime.change$stock_date)
rc.es <- c(rc.es, list(dtr.treat = dtr.treat))
rc.abs.es <- combine_event_studies(es.abs, event_country = regime.change$country,
event_type = regime.change$type,
event_date = regime.change$stock_date)
save(rc.es, rc.abs.es, file = "output/regime-change-event-study.RData")
save(rc.es, rc.abs.es, file = "output/regime-change-event-study.RData")
rm(list = ls())
library("xtable")
library("data.table")
library("ggplot2")
load("data/data-clean.RData")
load("output/regime-change-event-study.RData")
theme_set(theme_bw())
source("code/func.R")
# coups
coup.index <- which(regime.change$type == "Coup")
artable.coups <- ar_table(td = rc.es$td, ar = rc.es$ar.treat[, coup.index],
sigma = rc.es$sigma.treat[coup.index],
dtr = rc.es$dtr.treat[coup.index],
country = regime.change[coup.index, country],
date = regime.change[coup.index, stock_date],
coup = FALSE)
myprint.xtable(artable.coups$car, file = "tables/artable-coups-car.txt")
myprint.xtable(artable.coups$car.mean, file = "tables/artable-coups-car-mean.txt")
View(regime.change)
View(regime.change)
View(event)
View(regime.change)
View(event)
View(ar_table)
View(ar_table)
View(regime.change)
View(event)
ven.index <- which(event$type == "Partial Coup")
artable.ven <- ar_table(td = rc.es$td, ar = rc.es$ar.treat[, ven.index],
sigma = rc.es$sigma.treat[ven.index],
dtr = rc.es$dtr.treat[ven.index],
country = regime.change[ven.index, country],
date = regime.change[ven.index, stock_date],
coup = FALSE)
ven <- event[ticker == "_IBCD" & stock_date == "2002-04-12"]
ven.es <- event_study(ticker = index$ticker, date = index$date, dr = index$dr,
event_ticker = ven$ticker,
event_window = 20, estimation_window = 200,
event_date = ven$stock_date, model = "constant", control = FALSE)
ven.es$ar.treat[, lar := ar - qnorm(.975) * ven.es$sigma.treat]
ven.es$ar.treat[, uar := ar + qnorm(.975) * ven.es$sigma.treat]
p <- ggplot(ven.es$ar.treat[abs(td) <= 10], aes(x = td, y = ar)) +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .2) +
xlab("Trading days") + ylab("AR (%)") +
geom_hline(aes(yintercept = 0), linetype = 2)
rm(list = ls())
library("xtable")
library("data.table")
library("ggplot2")
load("data/data-clean.RData")
load("output/regime-change-event-study.RData")
theme_set(theme_bw())
source("code/func.R")
# Chart
ven <- event[ticker == "_IBCD" & stock_date == "2002-04-12"]
ven.es <- event_study(ticker = index$ticker, date = index$date, dr = index$dr,
event_ticker = ven$ticker,
event_window = 20, estimation_window = 200,
event_date = ven$stock_date, model = "constant", control = FALSE)
ven.es$ar.treat[, lar := ar - qnorm(.975) * ven.es$sigma.treat]
ven.es$ar.treat[, uar := ar + qnorm(.975) * ven.es$sigma.treat]
p <- ggplot(ven.es$ar.treat[abs(td) <= 10], aes(x = td, y = ar)) +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .2) +
xlab("Trading days") + ylab("AR (%)") +
geom_hline(aes(yintercept = 0), linetype = 2)
View(p)
ven <- event[ticker == "_IBCD" & stock_date == "2002-04-12"]
ven.es <- event_study(ticker = index$ticker, date = index$date, dr = index$dr,
event_ticker = ven$ticker,
event_window = 20, estimation_window = 200,
event_date = ven$stock_date, model = "constant", control = FALSE)
ven.es$ar.treat[, lar := ar - qnorm(.975) * ven.es$sigma.treat]
ven.es$ar.treat[, uar := ar + qnorm(.975) * ven.es$sigma.treat]
p <- ggplot(ven.es$ar.treat[abs(td) <= 10], aes(x = td, y = ar)) +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .2) +
xlab("Trading days") + ylab("AR (%)") +
geom_hline(aes(yintercept = 0), linetype = 2)
print("p")
# Chart
ven <- event[ticker == "_IBCD" & stock_date == "2002-04-12"]
ven.es <- event_study(ticker = index$ticker, date = index$date, dr = index$dr,
event_ticker = ven$ticker,
event_window = 20, estimation_window = 200,
event_date = ven$stock_date, model = "constant", control = FALSE)
ven.es$ar.treat[, lar := ar - qnorm(.975) * ven.es$sigma.treat]
ven.es$ar.treat[, uar := ar + qnorm(.975) * ven.es$sigma.treat]
p <- ggplot(ven.es$ar.treat[abs(td) <= 10], aes(x = td, y = ar)) +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .2) +
xlab("Trading days") + ylab("AR (%)") +
geom_hline(aes(yintercept = 0), linetype = 2)
print(p)
ven <- event[ticker == "_IBCD" & stock_date == "2002-04-12"]
ven.es <- event_study(ticker = index$ticker, date = index$date, dr = index$dr,
event_ticker = ven$ticker,
event_window = 20, estimation_window = 200,
event_date = ven$stock_date, model = "constant", control = FALSE)
ven.es$ar.treat[, lar := ar - qnorm(.975) * ven.es$sigma.treat]
ven.es$ar.treat[, uar := ar + qnorm(.975) * ven.es$sigma.treat]
p <- ggplot(ven.es$ar.treat[abs(td) <= 10], aes(x = td, y = ar)) +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .2) +
xlab("Trading days") + ylab("AR (%)") +
geom_hline(aes(yintercept = 0), linetype = 3)
print(p)
# VENEZUELA PARTIAL COUP -------------------------------------------------------
ven <- event[ticker == "_IBCD" & stock_date == "2002-04-12"]
ven.es <- event_study(ticker = index$ticker, date = index$date, dr = index$dr,
event_ticker = ven$ticker,
event_window = 20, estimation_window = 200,
event_date = ven$stock_date, model = "constant", control = FALSE)
ven.es$ar.treat[, lar := ar - qnorm(.975) * ven.es$sigma.treat]
ven.es$ar.treat[, uar := ar + qnorm(.975) * ven.es$sigma.treat]
p <- ggplot(ven.es$ar.treat[abs(td) <= 5], aes(x = td, y = ar)) +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .2) +
xlab("Trading days") + ylab("AR (%)") +
geom_hline(aes(yintercept = 0), linetype = 2)
print(p)
# VENEZUELA PARTIAL COUP -------------------------------------------------------
ven <- event[ticker == "_IBCD" & stock_date == "2002-04-12"]
ven.es <- event_study(ticker = index$ticker, date = index$date, dr = index$dr,
event_ticker = ven$ticker,
event_window = 20, estimation_window = 200,
event_date = ven$stock_date, model = "constant", control = FALSE)
ven.es$ar.treat[, lar := ar - qnorm(.975) * ven.es$sigma.treat]
ven.es$ar.treat[, uar := ar + qnorm(.975) * ven.es$sigma.treat]
p <- ggplot(ven.es$ar.treat[abs(td) <= 10], aes(x = td, y = ar)) +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .2) +
xlab("Trading days") + ylab("AR (%)") +
geom_hline(aes(yintercept = 0), linetype = 2)
print(p)
p <- ggplot(ven.es$ar.treat[abs(td) <= 1], aes(x = td, y = ar)) +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .2) +
xlab("Trading days") + ylab("AR (%)") +
geom_hline(aes(yintercept = 0), linetype = 2)
print(p)
p <- ggplot(ven.es$ar.treat[abs(td) <= 10], aes(x = td, y = ar)) +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .2) +
xlab("Trading days") + ylab("AR (%)") +
geom_hline(aes(yintercept = 0), linetype = 2)
print(p)
p <- ggplot(ven.es$ar.treat[abs(td) <= 10], aes(x = td, y = ar)) +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .2, fill = "white") +
xlab("Trading days") + ylab("AR (%)") +
geom_hline(aes(yintercept = 0), linetype = 2)
print(p)
p <- ggplot(ven.es$ar.treat[abs(td) <= 10], aes(x = td, y = ar)) +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .2) +
xlab("Trading days") + ylab("AR (%)") +
geom_hline(aes(yintercept = 0), linetype = 2)
print(p)
p <- ggplot(ven.es$ar.treat[abs(td) <= 10], aes(x = td, y = ar)) +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .2, color = "grey") +
xlab("Trading days") + ylab("AR (%)") +
geom_hline(aes(yintercept = 0), linetype = 2)
print(p)
p <- ggplot(ven.es$ar.treat[abs(td) <= 10], aes(x = td, y = ar)) +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .2, color = "dark grey") +
xlab("Trading days") + ylab("AR (%)") +
geom_hline(aes(yintercept = 0), linetype = 2)
print(p)
p <- ggplot(ven.es$ar.treat[abs(td) <= 10], aes(x = td, y = ar)) +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .2) +
xlab("Trading days") + ylab("AR (%)") +
geom_hline(aes(yintercept = 0), linetype = 2)
print(p)
p <- ggplot(ven.es$ar.treat[abs(td) <= 10], aes(x = td, y = ar)) +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .2) +
xlab("Trading days") + ylab("AR (%)") +
geom_hline(aes(yintercept = 0), linetype = 1)
print(p)
p <- ggplot(ven.es$ar.treat[abs(td) <= 10], aes(x = td, y = ar)) +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .2) +
xlab("Trading days") + ylab("AR (%)") +
geom_hline(aes(yintercept = 0), linetype = 2)
print(p)
p <- ggplot(ven.es$ar.treat[abs(td) <= 10], aes(x = td, y = ar)) +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .2) +
xlab("Trading days") + ylab("AR (%)") +
geom_hline(aes(yintercept = 0), linetype = 2, color = "grey")
print(p)
p <- ggplot(ven.es$ar.treat[abs(td) <= 10], aes(x = td, y = ar)) +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .2) +
xlab("Trading days") + ylab("AR (%)") +
geom_hline(aes(yintercept = 0), linetype = 2)
print(p)
p <- ggplot(ven.es$ar.treat[abs(td) <= 10], aes(x = td, y = ar)) +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .2, panel.grid.major = element_blank()) +
xlab("Trading days") + ylab("AR (%)") +
geom_hline(aes(yintercept = 0), linetype = 2)
print(p)
p <- ggplot(ven.es$ar.treat[abs(td) <= 10], aes(x = td, y = ar)) +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .2) +
xlab("Trading days") + ylab("AR (%)") +
geom_hline(aes(yintercept = 0), linetype = 2)
print(p)
p +
#plots the points
geom_point() +
#theme with white background
theme_bw() +
#eliminates background, gridlines, and chart border
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
)
print(p)
p <- ggplot(ven.es$ar.treat[abs(td) <= 10], aes(x = td, y = ar)) +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .2) +
xlab("Trading days") + ylab("AR (%)") +
geom_hline(aes(yintercept = 0), linetype = 2) +
theme_classic()
print(p)
p <- ggplot(ven.es$ar.treat[abs(td) <= 10], aes(x = td, y = ar)) +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .2) +
xlab("Trading days") + ylab("AR (%)") +
geom_hline(aes(yintercept = 0), linetype = 2, color = "grey") +
theme_classic()
print(p)
p <- ggplot(ven.es$ar.treat[abs(td) <= 10], aes(x = td, y = ar)) +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .2) +
xlab("Trading days") + ylab("AR (%)") +
geom_hline(aes(yintercept = 0), linetype = 2, color = "grey") +
geom_vline(aes(xintercept = 0), linetype = 2, color = "grey") +
theme_classic()
print(p)
p <- ggplot(ven.es$ar.treat[abs(td) <= 10], aes(x = td, y = ar)) +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .5) +
xlab("Trading days") + ylab("AR (%)") +
geom_hline(aes(yintercept = 0), linetype = 2, color = "grey") +
geom_vline(aes(xintercept = 0), linetype = 2, color = "grey") +
theme_classic()
print(p)
p <- ggplot(ven.es$ar.treat[abs(td) <= 10], aes(x = td, y = ar)) +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .3) +
xlab("Trading days") + ylab("AR (%)") +
geom_hline(aes(yintercept = 0), linetype = 2, color = "grey") +
geom_vline(aes(xintercept = 0), linetype = 2, color = "grey") +
theme_classic()
print(p)
p <- ggplot(ven.es$ar.treat[abs(td) <= 10], aes(x = td, y = ar)) +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .4) +
xlab("Trading days") + ylab("AR (%)") +
geom_hline(aes(yintercept = 0), linetype = 2, color = "grey") +
geom_vline(aes(xintercept = 0), linetype = 2, color = "grey") +
theme_classic()
print(p)
p <- ggplot(ven.es$ar.treat[abs(td) <= 10], aes(x = td, y = ar)) +
geom_hline(aes(yintercept = 0), linetype = 2, color = "grey") +
geom_vline(aes(xintercept = 0), linetype = 2, color = "grey") +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .4) +
xlab("Trading days") + ylab("AR (%)") +
theme_classic()
print(p)
p <- ggplot(ven.es$ar.treat[abs(td) <= 10], aes(x = td, y = ar)) +
geom_hline(aes(yintercept = 0), linetype = 2, color = "grey") +
geom_vline(aes(xintercept = 0), linetype = 2, color = "grey") +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .3) +
xlab("Trading days") + ylab("AR (%)") +
theme_classic()
print(p)
rm(list = ls())
library("xtable")
library("data.table")
library("ggplot2")
load("data/data-clean.RData")
load("output/regime-change-event-study.RData")
theme_set(theme_bw())
source("code/func.R")
p <- ggplot(ven.es$ar.treat[abs(td) <= 10], aes(x = td, y = ar)) +
geom_hline(aes(yintercept = 0), linetype = 2, color = "grey") +
geom_vline(aes(xintercept = 0), linetype = 2, color = "grey") +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .3) +
xlab("Trading days") + ylab("AR (%)") +
theme_classic()
print(p)
# VENEZUELA PARTIAL COUP -------------------------------------------------------
ven <- event[ticker == "_IBCD" & stock_date == "2002-04-12"]
ven.es <- event_study(ticker = index$ticker, date = index$date, dr = index$dr,
event_ticker = ven$ticker,
event_window = 20, estimation_window = 200,
event_date = ven$stock_date, model = "constant", control = FALSE)
ven.es$ar.treat[, lar := ar - qnorm(.975) * ven.es$sigma.treat]
ven.es$ar.treat[, uar := ar + qnorm(.975) * ven.es$sigma.treat]
p <- ggplot(ven.es$ar.treat[abs(td) <= 10], aes(x = td, y = ar)) +
geom_hline(aes(yintercept = 0), linetype = 2, color = "grey") +
geom_vline(aes(xintercept = 0), linetype = 2, color = "grey") +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .3) +
xlab("Trading days") + ylab("AR (%)") +
theme_classic()
print(p)
ggsave("figs/venezuela_coup_attempt_2002.pdf", p, height = 5, width = 7)
