#leaders <- fread("data-raw/leaders_duration.csv") # Is this dataset used in any way?
# revolution dates
rev <- fread("data-raw/revolutions.csv")
rev[, num := seq(1, length(country), 1)]
rev[, start_date := as.Date(start_date,"%m/%d/%Y")]
rev[, end_date := as.Date(end_date,"%m/%d/%Y")]
# CLEAN DATA -------------------------------------------------------------------
## dates
indices[, date := as.Date(date,"%m/%d/%Y")]
indices[, month := as.numeric(format(date, format = "%m"))]
indices[, day := as.numeric(format(date, format = "%d"))]
indices[, year := as.numeric(format(date, format = "%Y"))]
indices[, dow := day.of.week(month, day, year)]
event[, stock_date := as.Date(stock_date,"%m/%d/%Y")]
# Remove non-daily values from indices dataframe
indice_info <- read.csv("data-raw/indices.csv", nrows = 45, header = TRUE,
stringsAsFactors = FALSE)
indice_info <- as.data.table(indice_info)
indice_info$daily = sub('.*Daily From ', '', indice_info$Periodicity)
indice_info$daily = gsub("To.*$", "", indice_info$daily)
indice_info$daily = as.Date(paste('01', indice_info$daily), format='%d %b %Y')
indice_info = indice_info[, c('Ticker', 'daily')]
setnames(indice_info, c("ticker", "daily"))
indices <- merge(indices, indice_info, by="ticker")
indices <- indices[date >= daily]
indices = indices[, daily := NULL]
View(indices)
rm(list = ls())
library("data.table")
library("chron") # day.of.week command
# LOAD DATA --------------------------------------------------------------------
# ticker id's
country.lookup <- read.csv("data-raw/country_lookup.csv")
# daily stock returns
# countries
indices <- read.csv("data-raw/indices.csv", skip = 49, header = TRUE,
stringsAsFactors = FALSE)
indices <- as.data.table(indices)
indices[, Period_Change := NULL]
setnames(indices, c("date","ticker","p","dr","real_p"))
# regime changes
event <- fread("data-raw/event_list.csv")
# leader duration
#leaders <- fread("data-raw/leaders_duration.csv") # Is this dataset used in any way?
# revolution dates
rev <- fread("data-raw/revolutions.csv")
rev[, num := seq(1, length(country), 1)]
rev[, start_date := as.Date(start_date,"%m/%d/%Y")]
rev[, end_date := as.Date(end_date,"%m/%d/%Y")]
# CLEAN DATA -------------------------------------------------------------------
## dates
indices[, date := as.Date(date,"%m/%d/%Y")]
indices[, month := as.numeric(format(date, format = "%m"))]
indices[, day := as.numeric(format(date, format = "%d"))]
indices[, year := as.numeric(format(date, format = "%Y"))]
indices[, dow := day.of.week(month, day, year)]
event[, stock_date := as.Date(stock_date,"%m/%d/%Y")]
# Remove non-daily values from indices dataframe
indice_info <- read.csv("data-raw/indices.csv", nrows = 45, header = TRUE,
stringsAsFactors = FALSE)
indice_info <- as.data.table(indice_info)
indice_info$daily = sub('.*Daily From ', '', indice_info$Periodicity)
indice_info$daily = gsub("To.*$", "", indice_info$daily)
indice_info$daily = as.Date(paste('01', indice_info$daily), format='%d %b %Y')
indice_info = indice_info[, c('Ticker', 'daily')]
setnames(indice_info, c("ticker", "daily"))
indices <- merge(indices, indice_info, by="ticker")
indices <- indices[date >= daily]
indices = indices[, daily := NULL]
# Correct Argentina data for shift in indexing in 1983 and 1988
indices[, real_p := ifelse(date >= "1983-01-01" &
date < "1988-01-01" &
ticker == "_IBGD", real_p * 1000, real_p)]
indices[, real_p := ifelse((date >= '1988-01-01' & ticker == "_IBGD"),
(real_p * 10000000), real_p)]
# inflation adjusted returns
indices[, dr := (real_p - shift(real_p))/shift(real_p), by = "ticker"]
## continuously compounded returns
indices[, dr := 100 * log(dr+1)]
indices[, abs_dr := abs(dr)]
## market indices
ticker.market <- c("_MIWO00D", "_IPDCPD", "_A31", "_P31")
index.market <- indices[ticker %in% ticker.market,
.(date, ticker, dow, p, dr, real_p, abs_dr)]
# use friday market indices for countries that trade on sunday's. note that
# i am only doing this for emerging market and world indices
index.market.0 <- index.market[dow == 5 & ticker %in% c("_MIWO00D", "_IPDCPD")]
index.market.0[, date := date + 2]
index.market <- rbind(index.market.0, index.market)
index.market[, dow := NULL]
# wide form
index.market <- melt(index.market, id.vars = c("date", "ticker"))
index.market <- dcast.data.table(index.market, date  ~ ticker + variable, value.var = "value")
market.names <- gsub("_MIWO00D", "msci_wi", colnames(index.market))
market.names <- gsub("_IPDCPD", "emerg", market.names)
market.names <- gsub("_A31", "latamer", market.names)
market.names <- gsub("_P31", "seasia", market.names)
setnames(index.market, market.names)
## country indices
index <- indices[!ticker %in% ticker.market]
index <- merge(index, index.market, all.x = TRUE, by = "date")
index <- index[order(ticker, date)]
index[, td := seq(1, .N), by = "ticker"]
# regime change
regime.change <- event[type == "Coup" | type == "Assassination" |
type == "Resignation",
.(country, ticker, stock_date, type)]
# Drop March 1976 Argentinian coup due to market closure
regime.change <- regime.change[stock_date != '1976-04-05']
# SAVE DATA --------------------------------------------------------------------
save(country.lookup, event, index, regime.change, rev,
file = "data/data-clean.RData")
# Import libraries
rm(list = ls())
library("data.table")
library("ggplot2")
load("data/data-clean.RData")
source("code/func.R")
theme_set(theme_bw())
# ABSOLUTE VALUE OF DAILY STOCK RETURNS BY DAYS FROM EVENT ---------------------
pre <- post <- 200
dr <- matrix(NA, nrow = pre + post + 1, ncol = nrow(regime.change))
for (i in 1:nrow(regime.change)){
dr[, i] <- return_by_td(stockdata = index,
event_ticker = regime.change$ticker[i],
event_date = regime.change$stock_date[i],
pre_event = pre,
post_event = post)
}
# note: 2 events don't have complete data and are excluded
dr.na <- apply(dr, 2, function (x) sum(1 * is.na(x)))
abs.dr.mean <- apply(abs(dr[, which(dr.na==0)]), 1, mean)
tmp <- data.table(dr = abs.dr.mean, td = seq(-pre, post))
# Create plot
p <- ggplot(tmp, aes(x = td, y = dr)) +
geom_area(color="gray48", fill='gray48', size = .1) +
xlab("Trading days") + ylab("Absolute value of daily return (%)") +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()) +
theme(axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
axis.ticks = element_blank()) +
theme(plot.margin=unit(c(0.5,0.5,0.5,0.5),"cm")) +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0))
ggsave("figs/daily_mean_absreturn.pdf", p, height = 5, width = 7)
rm(list = ls())
library("xtable")
library("data.table")
library("Synth")
load("data/data-clean.RData")
theme_set(theme_bw())
source("code/func.R")
# EVENT STUDY ------------------------------------------------------------------
# calculate abnormal returns and days to rebound
event.window <- 20
est.window <- 200
n.es <- nrow(regime.change)
es <- es.abs <- vector(mode = "list", n.es)
dtr.treat <- rep(NA, n.es)
# loop
for (i in 1:n.es){
# no controls for 1901
if(regime.change$stock_date[i] == mydate("09/07/1901")){
controli <- FALSE
} else{
controli <- TRUE
}
# use custom V in synth to deal with singular matrix in optim
if (regime.change$stock_date[i] == mydate("10/4/2002")){
custom.v.i <- rep(1, 2)
} else{
custom.v.i <- NULL
}
# run event study
es[[i]] <- event_study(ticker = index$ticker, date = index$date, dr = index$dr,
event_ticker = regime.change$ticker[i],
event_window = event.window, estimation_window = est.window,
event_date = regime.change$stock_date[i], model = "constant",
control = controli, custom_v = custom.v.i)
es.abs[[i]] <- event_study(ticker = index$ticker, date = index$date, dr = abs(index$dr),
event_ticker = regime.change$ticker[i],
event_window = event.window, estimation_window = est.window,
event_date = regime.change$stock_date[i], model = "constant",
control = controli, custom_v = custom.v.i)
# days to rebound
dtr.treat[i] <- days_to_rebound(ticker = index$ticker, date = index$date, price = index$p,
event_ticker = regime.change$ticker[i],
event_date = regime.change$stock_date[i])
# print
print(i)
}
# combine event studies
rc.es <- combine_event_studies(es, event_country = regime.change$country,
event_type = regime.change$type,
event_date = regime.change$stock_date)
rc.es <- c(rc.es, list(dtr.treat = dtr.treat))
rc.abs.es <- combine_event_studies(es.abs, event_country = regime.change$country,
event_type = regime.change$type,
event_date = regime.change$stock_date)
# save
save(rc.es, rc.abs.es, file = "output/regime-change-event-study.RData")
rm(list = ls())
library("xtable")
library("data.table")
library("ggplot2")
load("data/data-clean.RData")
load("output/regime-change-event-study.RData")
theme_set(theme_bw())
source("code/func.R")
# ABNORMAL RETURNS TABLES ------------------------------------------------------
# coups
coup.index <- which(regime.change$type == "Coup")
artable.coups <- ar_table(td = rc.es$td, ar = rc.es$ar.treat[, coup.index],
sigma = rc.es$sigma.treat[coup.index],
dtr = rc.es$dtr.treat[coup.index],
country = regime.change[coup.index, country],
date = regime.change[coup.index, stock_date],
coup = FALSE)
myprint.xtable(artable.coups$car, file = "tables/artable-coups-car.txt")
myprint.xtable(artable.coups$car.mean, file = "tables/artable-coups-car-mean.txt")
# assassinations
ass.index <- which(regime.change$type == "Assassination")
artable.ass <- ar_table(td = rc.es$td, ar = rc.es$ar.treat[, ass.index],
sigma = rc.es$sigma.treat[ass.index],
dtr = rc.es$dtr.treat[ass.index],
country = regime.change[ass.index, country],
date = regime.change[ass.index, stock_date])
myprint.xtable(artable.ass$car, file = "tables/artable-ass-car.txt")
myprint.xtable(artable.ass$car.mean, file = "tables/artable-ass-car-mean.txt")
# resignations
res.index <- which(regime.change$type == "Resignation")
artable.res <- ar_table(td = rc.es$td, ar = rc.es$ar.treat[, res.index],
sigma = rc.es$sigma.treat[res.index],
dtr = rc.es$dtr.treat[res.index],
country = regime.change[res.index, country],
date = regime.change[res.index, stock_date])
myprint.xtable(artable.res$car, file = "tables/artable-res-car.txt")
myprint.xtable(artable.res$car.mean, file = "tables/artable-res-car-mean.txt")
# VENEZUELA PARTIAL COUP -------------------------------------------------------
ven <- event[ticker == "_IBCD" & stock_date == "2002-04-12"]
ven.es <- event_study(ticker = index$ticker, date = index$date, dr = index$dr,
event_ticker = ven$ticker,
event_window = 20, estimation_window = 200,
event_date = ven$stock_date, model = "constant", control = FALSE)
ven.es$ar.treat[, lar := ar - qnorm(.975) * ven.es$sigma.treat]
ven.es$ar.treat[, uar := ar + qnorm(.975) * ven.es$sigma.treat]
p <- ggplot(ven.es$ar.treat[abs(td) <= 10], aes(x = td, y = ar)) +
geom_hline(aes(yintercept = 0), linetype = 2, color = "grey") +
geom_vline(aes(xintercept = 0), linetype = 2, color = "grey") +
geom_pointrange(aes(ymin = lar, ymax = uar), size = .3) +
xlab("Trading days") + ylab("AR (%)") +
theme_classic()
print(p)
ggsave("figs/venezuela_coup_attempt_2002.pdf", p, height = 5, width = 7)
rm(list = ls())
library("xtable")
library("data.table")
library("ggplot2")
library("rugarch")
load("data/data-clean.RData")
theme_set(theme_bw())
source("code/func.R")
# DATA SETUP -------------------------------------------------------------------
post.days <- pre.days <- 1000
n.rc <- nrow(regime.change)
dat <- vector(mode = "list", n.rc)
for (i in 1:n.rc){
dat[[i]] <- index[ticker == regime.change$ticker[i], .(ticker, date, dr)]
dat[[i]] <- calc_td(stockdata = dat[[i]],
event_date = regime.change$stock_date[i])
dat[[i]] <- dat[[i]][td >= -pre.days & td <= post.days]
dat[[i]] <- dat[[i]][complete.cases(dat[[i]])]
dat[[i]]$event_date <- regime.change$stock_date[i]
dat[[i]]$event_num <- i
}
nobs <- do.call("c", lapply(dat, nrow))
# GARCH MODEL ------------------------------------------------------------------
# model spects
garch.spec <- ugarchspec(mean.model = list(armaOrder = c(0,0)),
distribution.model = "norm")
# run models
for (i in 1:n.rc){
rc.garchfit <- ugarchfit(spec = garch.spec, data = dat[[i]]$dr)
dat[[i]]$garch_volatility <- rc.garchfit@fit$sigma
print(i)
}
# VOLATILITY PLOTS -------------------------------------------------------------
dat <- rbindlist(dat, fill = TRUE)
volatility.mean <- dat[, .(mean_garch_volatility = mean(garch_volatility, na.rm = TRUE)),
by = c("td")]
p.volatility <-
ggplot(volatility.mean[td >= -250 & td <= 250],
aes(x = td, y = mean_garch_volatility)) +
geom_line(color = "grey48") +
xlab("Trading days") +
ylab("Mean volatility") +
theme_classic()
ggsave("figs/mean-volatility.pdf", p.volatility, height = 5, width = 7)
rm(list = ls())
load("output/regime-change-event-study.RData")
load("data/data-clean.RData")
library("data.table")
library("ggplot2")
source("code/func.R")
theme_set(theme_bw())
# NON-PARAMETRIC TESTS ---------------------------------------------------------
ed <- which(rc.es$td == 0)
tab.np <- matrix(NA, nrow = 4, ncol = 7)
colnames(tab.np) <- c("mean_ar_treat", "rank_pval_treat", "sign_pval_treat",
"mean_ar_control", "rank_pval_control", "sign_pval_control",
"wilcoxon_rank_pval")
indx <- list(coup.index = which(regime.change$type == "Coup"),
ass.index = which(regime.change$type == "Assassination"),
res.index = which(regime.change$type == "Resignation"))
sign.dir <- c("negative", "negative", "positive")
## Treatment
# mean abnormal return
for (i in 1:3){
tab.np[i, 1] <- mean(rc.es$ar.treat[ed, indx[[i]]])
}
tab.np[4, 1] <-  mean(rc.abs.es$ar.treat[ed, ])
# rank test p-value
for (i in 1:3){
tab.np[i, 2] <- rank_test(rc.es$ar.treat[, indx[[i]]], rc.es$td)
}
tab.np[4, 2] <-  rank_test(rc.abs.es$ar.treat[, indx[[i]]], rc.abs.es$td)
# sign test p-value
for (i in 1:3){
tab.np[i, 3] <- sign_test(rc.es$ar.treat[ed, indx[[i]]], sign.dir[i])
}
tab.np[4, 3] <-  sign_test(rc.abs.es$ar.treat[ed, indx[[i]]], sign.dir[i])
## Control
# mean abnormal return
for (i in 1:3){
tab.np[i, 4] <- mean(rc.es$ar.control[ed, indx[[i]]], na.rm = TRUE)
}
tab.np[4, 4] <-  mean(rc.abs.es$ar.control[ed, ], na.rm = TRUE)
# rank test p-value
for (i in 1:3){
tab.np[i, 5] <- rank_test(rc.es$ar.control[, indx[[i]]] , rc.es$td)
}
tab.np[4, 5] <-  rank_test(rc.abs.es$ar.control[, indx[[i]]], rc.abs.es$td)
# sign test p-value
for (i in 1:3){
tab.np[i, 6] <- sign_test(rc.es$ar.control[ed, indx[[i]]], sign.dir[i])
}
tab.np[4, 6] <-  sign_test(rc.abs.es$ar.control[ed, indx[[i]]], sign.dir[i])
## Wilcoxon rank test
for (i in 1:3){
wilcox.ar <- wilcox.test(x = rc.es$ar.treat[ed, indx[[i]]],
y = rc.es$ar.control[ed, indx[[i]]],
paired = TRUE)
tab.np[i, 7] <- wilcox.ar$p.value
}
wilcox.ar <- wilcox.test(x = rc.abs.es$ar.treat[ed, ],
y = rc.abs.es$ar.control[ed, ],
paired = TRUE)
tab.np[4, 7] <- wilcox.ar$p.value
tab.np <- formatC(tab.np, format = "f", digits = 3)
event.type <- c("Coups", "Assassinations", "Resignations", "All (Absolute Value)")
tab.np <- cbind(event.type, tab.np)
myprint.xtable(tab.np, file = "tables/non-parametric-ar0.txt")
# CAR SURROUNDING REGIME CHANGES -----------------------------------------------
pos.events <- which(rc.es$ar.treat[ed, ] >= 0)
neg.events <- which(rc.es$ar.treat[ed, ] < 0)
# positive events
car.mean.pos <- mean_car_prepost(ar = rc.es$ar.treat[, pos.events],
sigma = rc.es$sigma.treat[pos.events],
td = rc.es$td)
car.mean.pos[, lcar_mean := car_mean - qnorm(.975) * car_mean_se]
car.mean.pos[, ucar_mean := car_mean + qnorm(.975) * car_mean_se]
car.mean.pos[, lab := "Positive event"]
# negative events
car.mean.neg <- mean_car_prepost(ar = rc.es$ar.treat[, neg.events],
sigma = rc.es$sigma.treat[neg.events],
td = rc.es$td)
car.mean.neg[, lcar_mean := car_mean - qnorm(.975) * car_mean_se]
car.mean.neg[, ucar_mean := car_mean + qnorm(.975) * car_mean_se]
car.mean.neg[, lab := "Negative event"]
# plot
car.mean <- rbind(car.mean.neg, car.mean.pos)
p.meancar <- ggplot(car.mean, aes(x = td, y = car_mean)) + geom_line() +
geom_point(size = .8) + facet_wrap(~lab) +
geom_ribbon(aes(ymin = lcar_mean, ymax = ucar_mean), alpha = 0.2) +
xlab("Trading days") + ylab("Mean CAR (%)") +
geom_hline(aes(yintercept = 0), linetype = 2)
ggsave("figs/mean-car-pos-neg.pdf", p.meancar, height = 5, width = 7)
# DAILY RETURN PLOTS: CONTROL VS TREATMENT -------------------------------------
# daily return by event
pdf("figs/dr-ts-by-event.pdf", onefile = TRUE)
for (i in 1:nrow(regime.change)){
name <- paste0(regime.change$country[i], " (",
regime.change$stock_date[i], ")")
p <- ggplot(data = rc.es$dr[event_date == regime.change$stock_date[i]],
aes(x = td, y = dr, col = lab)) +
geom_line() + geom_point(size = .5) + geom_vline(xintercept = 0, linetype = 2) +
xlab("Trading day") + ylab("Daily return") + labs(title = name) +
scale_colour_discrete("") + theme(plot.title = element_text(hjust = 0.5),
legend.position = "bottom")
print(p)
print(i)
}
dev.off()
# car by event
pdf("figs/car-ts-by-event.pdf", onefile = TRUE)
for (i in 1:nrow(regime.change)){
name <- paste0(regime.change$country[i], " (",
regime.change$stock_date[i], ")")
tmp <- rbind(data.table(car = rc.es$car.treat[, i], td = rc.es$td, lab = "Treatment"),
data.table(car = rc.es$car.control[, i], td = rc.es$td, lab = "Control"))
p <- ggplot(data = tmp,
aes(x = td, y = car, col = lab)) +
geom_line() + geom_point(size = .5) + geom_vline(xintercept = 0, linetype = 2) +
xlab("Trading day") + ylab("CAR") + labs(title = name) +
scale_colour_discrete("") + theme(plot.title = element_text(hjust = 0.5),
legend.position = "bottom")
print(p)
print(i)
}
dev.off()
rm(list = ls())
load("data/data-clean.RData")
source("code/func.R")
library("data.table")
library("plm")
library("lmtest")
library("broom")
theme_set(theme_bw())
# EGYPTIAN REVOLUTION ----------------------------------------------------------
egypt.es <-  event_study(ticker = index$ticker, date = index$date, dr = index$dr,
event_ticker = "_EFGID",
event_window = 20, estimation_window = 200,
event_date = rev[name == "Egyptian Revolution", start_date],
model = "constant", control = FALSE)
egypt.es <- c(egypt.es, car_prepost(egypt.es$ar.treat$td, egypt.es$ar.treat$ar,
egypt.es$sigma.treat))
egypt.es <- data.table(date = egypt.es$ar.treat$date, td = egypt.es$ar.treat$td,
car = egypt.es$car, car.se = egypt.es$car.se)
egypt.es[, lcar := car - qnorm(.975) * car.se]
egypt.es[, ucar := car + qnorm(.975) * car.se]
p <- ggplot(egypt.es, aes(x = date, y = car)) + geom_line() +
geom_point(size = .8) +
geom_ribbon(aes(ymin = lcar, ymax = ucar), alpha=0.2) +
xlab("Date") + ylab("CAR (%)") +
geom_hline(aes(yintercept = 0), linetype = 2) +
annotate("text", x = as.Date("02/10/2011", "%m/%d/%Y"),
y = 5, label = "Jan 25: uprising begins", size = 3) +
geom_segment(aes(x = as.Date("02/07/2011", "%m/%d/%Y"), y = 4,
xend = as.Date("01/25/2011", "%m/%d/%Y") ,
yend = 0),
arrow = arrow(length = unit(0.01, "npc"))) +
annotate("text", x = as.Date("02/25/2011", "%m/%d/%Y"),
y = -14, label = "Feb 11: Mubarak resigns", size = 3) +
geom_segment(aes(x = as.Date("02/25/2011", "%m/%d/%Y"), y = -15,
xend = as.Date("02/11/2011", "%m/%d/%Y") ,
yend = -20),
arrow = arrow(length = unit(0.01, "npc"))) +
annotate("text", x = as.Date("03/15/2011", "%m/%d/%Y"),
y = -36, label = "Mar 23: stock market reopens", size = 3) +
geom_segment(aes(x = as.Date("03/15/2011", "%m/%d/%Y"), y = -35,
xend = as.Date("2011-03-23"),
yend = 1.01 * egypt.es[date == as.Date("2011-03-23"), car]),
arrow = arrow(length = unit(0.01, "npc")))
ggsave("figs/egypt-revolution-2011.pdf", p, height = 5, width = 7)
# EFFECT OF PUBLIC PROTESTS ON STOCK PRICES ------------------------------------
# data
index.rev <- vector(mode = "list", length(rev$ticker))
for (i in 1:length(rev$ticker)){
index.rev[[i]] <- index[ticker == rev$ticker[i] & date >= (rev$start_date[i] - 250)
& date <= (rev$end_date[i] + 250)]
index.rev[[i]][, rev_no := i]
index.rev[[i]][, event := ifelse(date >= rev$start_date[i] &
date <= rev$end_date[i], 1, 0)]
index.rev[[i]] <- index.rev[[i]][!is.na(dr)]
}
# volatility
garch.spec <- ugarchspec(mean.model = list(armaOrder = c(0,0)),
distribution.model = "norm")
for (i in 1:length(rev$ticker)){
rc.garchfit <- ugarchfit(spec = garch.spec, data = index.rev[[i]]$dr)
index.rev[[i]]$garch_volatility <- rc.garchfit@fit$sigma
print(i)
}
index.rev <- rbindlist(index.rev)
# panel data
index.rev <- pdata.frame(index.rev, index = c("rev_no", "date"))
# regressions
revfit1 <- plm(dr ~ event, data = index.rev, model = "within")
revfit2 <- plm(abs_dr ~ event, data = index.rev, model = "within")
revfit3 <- plm(abs_dr ~ event + emerg_abs_dr, data = index.rev, model = "within")
revfit4 <- plm(garch_volatility ~ event, data = index.rev, model = "within")
revfit <- list(revfit1, revfit2, revfit3, revfit4)
nfits <- length(revfit)
# table of results
vars <- c("event", "emerg_abs_dr")
varsl <- c("Protest", "Emerging market index")
lookup <- data.frame(term = vars, varname = varsl, id = seq(1, length(vars)))
revfit.table <- reg_table(models = revfit, lookup = lookup)
n <- nrow(revfit.table)
fe.lab <- rep(paste0("\\multicolumn{1}{c}{", "Yes}"), nfits)
fe.lab <- c("Event fixed effect?", fe.lab)
revfit.table <- rbind(revfit.table[1:(n-1), ], fe.lab, revfit.table[n, ])
events <- rep(NA, nfits)
for (i in 1:length(events)){
events[i] <- pdim(revfit[[i]]$model)$nT$n
}
events <- paste0("\\multicolumn{1}{c}{", events, "}")
revfit.table <- rbind(revfit.table, c("Events", events))
myprint.xtable(revfit.table, file = "tables/protest-regtable.txt")
